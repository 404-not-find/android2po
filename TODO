Support "values-en-rUS-finger"-style resource directories.

Add support for --verbosity, --quiet options.

Support an option file to configure stuff like for example .po width.

A setup.py to install system-wide, including dependencies, would be nice.

A number of Android format peculiarities are not handled as well as we
could, or in some cases even incorrectly:
  - Whitespace. Generally Android removes incorrect whitespace, in much
    the same way a HTML browser would. Note however:
         - Unless nested HTML tags are used, leading and trailing
           spaces seem to be removed completely. Otherwise, a single
           space will remain if there is more than one.
         - Whitespace generally refers to spaces here, it seems \t are
           always kept, even duplicates, even at the head or tail of a
           string.
         - Whitespace before a tag, and one after it, yields two spaces.
         - "\ " to escape a space, as noted here:
              http://stackoverflow.com/questions/1587056/android-string-concatenate-how-to-keep-the-spaces-at-the-end-and-or-beginning
           didn't work for me (2.0) anywhere, *except* for the last
           whitespace character in a string (!?).
      - "..." can be used to escape whitespace, see:
           http://code.google.com/p/android/issues/detail?id=4853
    Generally, our goal should be to remove insignificant whitespace
    on export to make things easier for translators, but keep the
    significant bits. Using the lxml HTML parsing functionality could be
    considered. On import, we need to make sure that the whitespace that
    is significant is escaped properly. Since translators can easily make
    whitespace mistakes, it might be useful to provide an option to disable
    the escape-on-import behavior, and simply normalize most whitespace (?).
  - For ' and " chars, special considerations need to be taken:
  		- " are used to quote (see below), so the actual character needs to
  		  be escaped using \.
  		- ' is not used to quote, but if it isn't, a compile error is raised.
  		- Inside "...", ' is allowed.
  		- &quot; and &apos; are replaced on an XML level, before the Android
  		  string parser, and so it makes no difference whether they are used,
  		  or the actual character. In fact &apos; needs to be prefixed with a
  		  backslash.
    We would probably want to handle " correctly go get significant
    whitespace, and simply ignore compile errors on ' (just use the character
    even if it exists unescaped).
  - An arbitrary character prefixed with \ seems to just ignored (besides the
    single strange case of a trailing space) in every case; it just goes
    missing. This is even true if the string is surrounded in quotes. We
    would probably just keep them to be safe, and let the dev/translator
    work it out whether there is a problem.
  - Escaping with "..", '...' is complex; there can be any number of
    such escaped blocks inside a string. Outside of such a block, the normal
    whitespace rules apply; at the borders of such a block, whitespace is
    reduced to a single space, not to none, as would be the case for the
    beginning/end of the full string. Normal \ escaping still works inside
    those blocks as well. "..." cannot span cross nested tags.
    Not using " in pairs behaves strangely as well: '"       a     b    '
    maintains the spaces up to b, but not afterwards till the end. When
    nested tags are used, each tag is considered such a "end" (since quotes
    cannot be nested around tags!)
    Different from what the doc claims:
		http://developer.android.com/guide/topics/resources/available-resources.html#stringresources
		(Note: If you use an apostrophe or a quote in your string, you must either escape it or enclose the whole string in the other kind of enclosing quotes)
    it doesn't seem to be possible to use ' to quote (compile error if
    not escaped).
  - Characters that you can escape with \ seem to be: \n \t \' \" \\ (there
    may be more). Note that double slashes need to be handled. Our goal here
    would be to convert those escapes on import/export.
  - Numeric entities (&#45;) are handled fine by Android; we need to
    check that we do as well; The idea would be to convert them to
    the correct character on export, but never convert anything to
    an numeric entity on import.
 => Publish all this as a separate document as well, or a blog post.

Add some tests.
  - Test multiline strings.
  - Test all the escaping special cases listed above.
  - Test &lt;&gt; encoded HTML (d5f8568cf7d16077c2c6a0c906cdcc5d2135030c)

Support string-arrays. We can do this simply by writing them out using
as a context "name:item-index".